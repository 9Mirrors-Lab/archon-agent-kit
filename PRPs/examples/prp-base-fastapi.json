{
  "document_type": "prp",
  "title": "Base Template - FastAPI",
  "version": "1.0",
  "author": "prp-creator",
  "date": "2025-08-20",
  "status": "draft",

  "goal": "Deliver a FastAPI service with typed models, modular routers, and resilient HTTP clients.",

  "why": [
    "Fast developer feedback loops with Python typing and Pydantic",
    "Clear separation of routers, services, and schemas",
    "First-class async support for performance"
  ],

  "what": {
    "description": "Production-ready FastAPI app with health checks, structured logging, and tests.",
    "success_criteria": [
      "App boots with no exceptions",
      "All endpoints have input/output schemas",
      "100% of critical paths covered by tests"
    ],
    "user_stories": [
      "As an operator, I can hit /healthz and get 200 with service info",
      "As a developer, I can add a router with models and tests quickly"
    ]
  },

  "context": {
    "documentation": [
      {"source": "https://fastapi.tiangolo.com/", "why": "Framework docs"},
      {"source": "https://docs.pydantic.dev/", "why": "Data validation"}
    ],
    "existing_code": [
      {"file": "app/main.py", "purpose": "App factory and router include"},
      {"file": "app/routers/items.py", "purpose": "Example router"},
      {"file": "app/schemas.py", "purpose": "Pydantic models"}
    ],
    "gotchas": [
      "Use async def for I/O-bound endpoints",
      "Close HTTP clients (httpx.AsyncClient) properly",
      "Return JSON-serializable models only"
    ],
    "current_state": "Base FastAPI project skeleton",
    "dependencies": [
      "fastapi", "uvicorn[standard]", "pydantic", "httpx", "pytest", "pytest-asyncio"
    ],
    "environment_variables": [
      "PORT", "DATABASE_URL", "ENV"
    ]
  },

  "implementation_blueprint": {
    "phase_1_scaffold": {
      "description": "Project layout, config, and health checks",
      "tasks": [
        {"title": "Create app factory and settings", "files": ["app/main.py", "app/config.py"], "details": "Use Pydantic Settings"},
        {"title": "Add /healthz and /ready endpoints", "files": ["app/routers/health.py"], "details": "Return version/build info"}
      ]
    },
    "phase_2_routes": {
      "description": "Routers + schemas",
      "tasks": [
        {"title": "Items router with CRUD", "files": ["app/routers/items.py", "app/schemas/items.py"], "details": "Typed request/response models"},
        {"title": "Error handling middleware", "files": ["app/middleware.py"], "details": "Map exceptions to HTTP responses"}
      ]
    },
    "phase_3_integration": {
      "description": "External calls and persistence",
      "tasks": [
        {"title": "httpx client + retries", "files": ["app/clients/http.py"], "details": "Timeouts, retry/backoff"},
        {"title": "DB layer placeholder", "files": ["app/db/__init__.py"], "details": "Session management pattern"}
      ]
    }
  },

  "validation": {
    "level_1_syntax": ["ruff check .", "mypy ."],
    "level_2_unit_tests": ["pytest -q"],
    "level_3_integration": ["uvicorn app.main:app --port 8000 & sleep 2 && curl -f http://localhost:8000/healthz"],
    "level_4_end_to_end": ["ab or hey load test basic endpoints", "security scan dependencies"]
  },

  "additional_context": {
    "security_considerations": [
      "Validate all inputs via Pydantic models",
      "Hide internal exceptions; map to safe messages",
      "Set CORS and security headers appropriately"
    ],
    "testing_strategies": [
      "Use TestClient for sync tests; AsyncClient for async routes",
      "Fixture per router/service; isolate I/O with mocks"
    ],
    "monitoring_and_logging": [
      "Structured logging with log levels",
      "Expose /metrics later if needed"
    ]
  }
}
